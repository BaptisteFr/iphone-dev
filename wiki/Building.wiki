#summary How to build the toolchain.
#labels Featured,Phase-Deploy

Please note that these instructions are subject to change. Before updating your toolchain installation, you should always check the newest version of this page. You should also check [Portability] to see whether there are any special instructions for your particular platform.

=HOWTO build the toolchain=

 * Check out a copy of LLVM _SVN_, and build a _release_ build (as opposed to a debug one). Set the `$LLVMOBJDIR` shell variable to the root of LLVM's _source_ tree (not its install directory!) after installation. This variable is used by LLVM-GCC to find LLVM.
{{{
$ svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm-svn
$ pushd llvm-svn
$ ./configure --enable-optimized
$ make ENABLE_OPTIMIZED=1
$ sudo make install
$ LLVMOBJDIR=`pwd`
$ popd
}}}

 * Check out a copy of the iphone-dev SVN repository.
{{{
$ svn checkout http://iphone-dev.googlecode.com/svn/trunk/ iphone-dev
$ pushd iphone-dev
}}}

 * Make a directory to hold the toolchain.
{{{
$ sudo mkdir /usr/local/arm-apple-darwin
}}}

 * Build odcctools.
{{{
$ pushd odcctools
$ ./configure --target=arm-apple-darwin --disable-ld64
$ make
$ sudo make install
$ popd
}}}

 * Get a copy of the iPhone root filesystem. This is usually obtained by decrypting and extracting the iPhone restore software using [http://iphone.fiveforty.net/wiki/index.php/Break_DMG_Password these tools], but there are many other methods to obtain this, including simply using `scp` to download all the files from the iPhone over Wi-Fi. Unpack the root filesystem somewhere, and set the environment variable `$HEAVENLY` to its path.
{{{
$ HEAVENLY=/usr/local/share/iphone-filesystem
}}}

 * Install the iPhone headers to the appropriate place. If you aren't on Mac OS X, replace the `/Developer/SDKs/MacOSX10.4u.sdk` path with the full path to the unpacked Mac OS X 10.4 Universal SDK. If you don't have a copy of this, see below.
{{{
$ pushd include
$ ./configure --with-macosx-sdk=/Developer/SDKs/MacOSX10.4u.sdk
$ sudo bash install-headers.sh
$ popd
}}}

 * Install csu, which includes `crt1.o`, `dylib1.o`, and `bundle1.o`. Don't rebuild them from source, as this requires a working cross-GCC, which you don't have yet (and the build-from-source process for csu is broken right now anyway). Binaries are provided for this reason.
{{{
$ pushd csu
$ ./configure --host=arm-apple-darwin
$ sudo make install
$ popd
}}}

 * Fill your installation of LLVM-GCC. Make sure that your Internet connection is up, and execute:
{{{
$ ./fill-llvm-gcc.sh
}}}

 * Configure and make LLVM-GCC. Make sure that `$LLVMOBJDIR` and `$HEAVENLY` are set per the instructions above.
{{{
$ mkdir llvm-gcc-iphone-build
$ pushd llvm-gcc-iphone-build
$ ../llvm-gcc-iphone/configure --enable-llvm=$LLVMOBJDIR --enable-languages=c,c++,objc,obj-c++ \
--target=arm-apple-darwin --enable-sjlj-exceptions --with-heavenly=$HEAVENLY \
--with-as=/usr/local/bin/arm-apple-darwin-as --with-ld=/usr/local/bin/arm-apple-darwin-ld
$ make LLVM_VERSION_INFO=2.0-svn-iphone-dev-0.3-svn 
$ sudo make install
$ popd
$ popd
}}}

 * You're done. Have fun!

=HOWTO obtain the Mac OS X headers on Linux or Windows=

 * Install the `cpio` utility using your distribution's standard package management system. All the major Linux distributions, as well as Cygwin, should have this utility.
 * Download the Xcode DMG from [http://developer.apple.com/tools/download/ Apple's Developer Tools download page]. It is free, but you will need to register with them. It is also huge (~924 MB).
 * Extract the `Packages/MacOSX10.4.Universal.pkg` directory from the Xcode DMG. Do not use the Linux kernel's HFS+ loopback mount: it does not support the format used by this DMG, and your files will be corrupted. One program that is known to work is [http://www.poweriso.com/ PowerISO], although it isn't free.
 * Extract the `pax` archive inside the Mac OS X 10.4 SDK package.
{{{
mkdir MacOSX10.4-Universal-SDK
pushd MacOSX10.4-Universal-SDK
gunzip -c ../MacOSX10.4.Universal.pkg/Contents/Archive.pax.gz | cpio -i
popd
}}}
 * The SDK files should now live in `MacOSX10.4-Universal-SDK/Developer/SDKs/MacOSX10.4u.sdk` in the current directory. You'll pass the path to this directory to the configure script in the `include` directory. Feel free to get rid of the Xcode DMG and the package directory now.

=Gotchas=

 * Make sure that there are no spaces in any of the directory names that you use. GCC does not build if there are spaces in the directory names, and the shell scripts will not work. This is most often a problem on Windows.